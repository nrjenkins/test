library(readxl)
Skills_Assessment_December_2020 <- read_excel("Desktop/Skills Assessment December 2020.xlsx",
sheet = "Client Services in FY 2016-17")
View(Skills_Assessment_December_2020)
library(tidyverse)
q1 <- Skills_Assessment_December_2020 %>% group_by(`Client ID`) %>% count()
q1 <- Skills_Assessment_December_2020 %>% group_by(`Client ID`) %>% count() %>% filter(n >= 3)
q1 <- Skills_Assessment_December_2020 %>% group_by(`Client ID`) %>% count() %>% filter(n >= 3) %>% summarise(total = n())
q1 <- Skills_Assessment_December_2020 %>% group_by(`Client ID`) %>% count() %>% filter(n >= 3)
q1 <- Skills_Assessment_December_2020 %>% group_by(`Client ID`) %>% count() %>% filter(n >= 3) %>% length(n)
q1 <- Skills_Assessment_December_2020 %>% group_by(`Client ID`) %>% count() %>% filter(n >= 3) %>% length()
q1 <- Skills_Assessment_December_2020 %>% group_by(`Client ID`) %>% count() %>% filter(n >= 3)
q1 <- Skills_Assessment_December_2020 %>% group_by(`Client ID`) %>% count() %>% filter(n >= 3) %>% nrow()
q1 <- Skills_Assessment_December_2020 %>% group_by(`Client ID`) %>% count() %>% filter(n >= 3)
q1 <- Skills_Assessment_December_2020 %>% group_by(`Client ID`) %>% count() %>% filter(n >= 3) %>% n()
lapply(packages, library)
packages <- c("tidyverse", "janitor")
lapply(packages, library)
lapply(packages, require, character.only = TRUE)
data <- read_excel("/Users/nickjenkins/Desktop/Skills Assessment December 2020.xlsx")
data <-
read_excel("/Users/nickjenkins/Desktop/Skills Assessment December 2020.xlsx") %>%
clean_names()
data <-
read_excel("/Users/nickjenkins/Desktop/Skills Assessment December 2020.xlsx", sheet = "Client Services in FY 2016-17") %>%
clean_names()
data <-
read_excel("/Users/nickjenkins/Desktop/Skills Assessment December 2020.xlsx",
sheet = "Client Services in FY 2016-17") %>%
clean_names()
q1 <-
data %>%
group_by(client_id) %>%
count() %>%
filter(n >= 3)
q1.answer <- length(q1$client_id)
q1.answer
q2 <-
data %>%
group_by(client_id) %>%
mutate(avg_srvs = mean(client_id)))
q2 <-
data %>%
group_by(client_id) %>%
mutate(avg_srvs = mean(client_id))
View(q2)
q2 <-
data %>%
mutate(avg_srvs = sum(client_id))
q2 <-
data %>%
mutate(avg_srvs = n(client_id))
q2 <-
data %>%
mutate(avg_srvs = nrows(client_id))
q2 <-
data %>%
mutate(avg_srvs = nrow(client_id))
q2 <-
data %>%
mutate(avg_srvs = nrow())
q2 <-
data %>%
mutate(avg_srvs = n())
q2 <-
data %>%
mutate(avg_srvs = n() / unique(client_id))
unique(data$client_id)
n(data)
distinct(data$client_id)
nrow(unique(data$client_id))
unique(data$client_id)
nrow(unique(data$client_id))
nrows(unique(data$client_id))
length(unique(data$client_id))
n(data)
nrow(data)
q2 <- nrow(data) / length(unique(data$client_id))
q2
data %>%
group_by(client_id) %>%
count() %>%
ggplot(data = ., aes(x = n)) +
geom_bar()
data %>%
group_by(client_id) %>%
count() %>%
ggplot(data = ., aes(x = n)) +
geom_bar() +
facet_wrap(~ sub_unit_id)
data %>%
group_by(client_id) %>%
count()
data %>%
group_by(client_id) %>%
mutate(n = count())
data %>%
group_by(client_id) %>%
mutate(n = n())
View(data)
data %>%
group_by(client_id) %>%
mutate(n = n()) %>%
ggplot(data = ., aes(x = n)) +
geom_bar() +
facet_wrap(~ sub_unit_id)
data %>%
group_by(client_id) %>%
mutate(n = n()) %>%
ggplot(data = ., aes(x = n)) +
geom_bar() +
facet_wrap(~ sub_unit_id) +
theme_classic()
data %>%
group_by(client_id) %>%
mutate(n = n_distinct(client_id)) %>%
ggplot(data = ., aes(x = n)) +
geom_bar() +
facet_wrap(~ sub_unit_id) +
theme_classic()
data %>%
group_by(client_id) %>%
mutate(n = n_distinct(client_id))
data %>%
group_by(sub_unit_id) %>%
mutate(n = n_distinct(client_id))
data %>%
group_by(sub_unit_id) %>%
mutate(n = n_distinct(client_id)) %>%
ggplot(data = ., aes(x = n)) +
geom_bar() +
facet_wrap(~ sub_unit_id) +
theme_classic()
data %>%
group_by(sub_unit_id) %>%
mutate(n = n_distinct(client_id)) %>%
ggplot(data = ., aes(x = n)) +
geom_bar() +
facet_wrap(~ sub_unit_id)
data %>%
group_by(sub_unit_id) %>%
mutate(n = n_distinct(client_id)) %>%
ggplot(data = ., aes(x = sub_unit_id, y = n)) +
geom_bar()
data %>%
group_by(sub_unit_id) %>%
mutate(n = n_distinct(client_id)) %>%
ggplot(data = ., aes(x = sub_unit_id, y = n)) +
geom_col()
packages <- c("tidyverse", "janitor")
lapply(packages, require, character.only = TRUE)
data <-
read_excel("/Users/nickjenkins/Desktop/Skills Assessment December 2020.xlsx",
sheet = "Client Services in FY 2016-17") %>%
clean_names()
packages <- c("tidyverse", "janitor", "readxl")
lapply(packages, require, character.only = TRUE)
data <-
read_excel("/Users/nickjenkins/Desktop/Skills Assessment December 2020.xlsx",
sheet = "Client Services in FY 2016-17") %>%
clean_names()
q1 <-
data %>%
group_by(client_id) %>%
count() %>%
filter(n >= 3)
q1.answer <- length(q1$client_id)
q1.answer
q2 <-
data %>%
group_by(client_id) %>%
mutate(total_service = count())
q2 <-
data %>%
group_by(client_id) %>%
mutate(total_service = n())
View(q2)
summarise(avg_srvs = mean(total_service))
q2 <-
data %>%
group_by(client_id) %>%
mutate(total_service = n()) %>%
summarise(avg_srvs = mean(total_service))
q2
q2 <- nrow(data) / length(unique(data$client_id))
q2
library(arm)
invlogit(0.22)
invlogit(0.39+0.22)
invlogit(0.39+0.22) - invlogit(0.39)
cars.data <- mtcars
library(tidyverse)
glimpse(cars.data)
cars.data <-
cars.data %>%
rename(cylinders = cyl,
displacement = disp,
rear_axle_ratio = drat,
weight = wt,
engine_type = vs,
trans_type = am,
gears = gear) %>%
mutate(engine_type = factor(engine_type, levels = c(0, 1),
labels = c("V-shaped", "Straight")),
trans_type = factor(trans_type, levels = c(0, 1),
labels = c("Automatic", "Manual")))
glimpse(cars.data)
ggplot(data = cars.data, aes(x = weight, y = mpg)) +
geom_point()
ggplot(data = cars.data, aes(x = weight, y = mpg)) +
geom_point() +
geom_smooth(method = "lm")
library(cmdstanr)
register_knitr_engine(override = FALSE) # This registers cmdstanr with knitr so that we can use
# it with R Markdown.
library(tidybayes)
model.data <-
cars.data %>%
select(mpg, weight) %>%
compose_data(.)
# sample from our model
linear.fit.1 <- linear.model$sample(data = model.data)
# summarize our model
print(linear.fit.1)
cars.data <-
cars.data %>%
mutate(weight_c = weight - mean(weight))
model.data <-
cars.data %>%
select(mpg, weight_c) %>%
compose_data(cars.data)
linear.fit.2 <- linear.model$sample(data = model.data)
print(linear.fit.2)
model.data <-
cars.data %>%
mutate(cylinders_c = cylinders - mean(cylinders),
hp_c = hp - mean(hp)) %>%
select(mpg, weight_c, cylinders_c, hp_c) %>%
compose_data(.)
linear.fit.3 <- linear.model$sample(data = model.data)
print(linear.fit.3)
library(bayesplot)
fit.draws <- linear.fit.3$draws() # extract the posterior draws
mcmc_trace(fit.draws)
rhats <- rhat(linear.fit.3)
mcmc_rhat(rhats)
eff.ratio <- neff_ratio(linear.fit.3)
eff.ratio
mcmc_neff(eff.ratio)
mcmc_acf(fit.draws)
linear.fit.3 <- linear.model$sample(data = model.data)
print(linear.fit.3)
y <- cars.data$mpg
fit.draws <- linear.fit.3$draws("y_rep")
ppc_dens_overlay(y = cars.data$mpg, yrep = y.rep[1:100, ])
y.rep <- linear.fit.3$draws("y_rep")
ppc_dens_overlay(y = cars.data$mpg, yrep = y.rep[1:100, ])
ppc_dens_overlay(y = cars.data$mpg, yrep = y.rep)
stanfit <- rstan::read_stan_csv(linear.fit.3$output_files())
# extract the fitted values
y.rep <- extract(stanfit)[["y_rep"]]
# convert the cmdstanr fit to an rstan object
library(rstan)
# convert the cmdstanr fit to an rstan object
library(rstan)
stanfit <- read_stan_csv(linear.fit.3$output_files())
# extract the fitted values
y.rep <- extract(stanfit)[["y_rep"]]
ppc_dens_overlay(y = cars.data$mpg, yrep = y.rep[1:100, ])
# expectations for the effect of weight on MPG
sample.weight <- rnorm(1000, mean = 0, sd = 100)
plot(density(sample.weight))
# expectations for the average mpg
sample.intercept <- rnorm(1000, mean = 0, sd = 100)
plot(density(sample.intercept))
# expectations for model variance
sample.sigma <- runif(1000, min = 0, max = 100)
plot(density(sample.weight))
# prior predictive simulation for mpg given the priors
prior_mpg <- rnorm(1000, sample.weight + sample.intercept, sample.sigma)
plot(density(prior_mpg))
# expectations for the effect of weight on MPG
sample.weight <- rnorm(1000, mean = -10, sd = 5)
plot(density(sample.weight))
# expectations for the average mpg
sample.intercept <- rnorm(1000, mean = 20, sd = 5)
plot(density(sample.intercept))
# expectations for model variance
sample.sigma <- runif(1000, min = 0, max = 10)
plot(density(sample.sigma))
# prior predictive simulation for mpg given the priors
prior_mpg <- rnorm(1000, sample.weight + sample.intercept, sample.sigma)
plot(density(prior_mpg))
linear.fit.4 <- linear.model$sample(data = model.data)
print(linear.fit.4)
linear.fit.4 <- read_stan_csv(linear.fit.4$output_files())
posterior <- as.data.frame(linear.fit.4)
library(tidyverse)
ggplot() +
geom_density(aes(x = sample.weight)) +
geom_density(aes(x = posterior$beta_w), color = "blue")
stan_plot(linear.fit.4,
pars = c("alpha", "beta_w", "beta_cyl", "beta_hp", "sigma"))
mcmc_areas(linear.fit.4)
mcmc_areas(linear.fit.4,
pars = c("alpha", "beta_w", "beta_cyl", "beta_hp", "sigma"))
# Fitted Line
ggplot(data = cars.data, aes(x = weight_c, y = mpg)) +
geom_point() +
stat_function(fun = function(x) mean(posterior$alpha) + mean(posterior$beta_w) * x)
# Fitted Line with Uncertainty ------------------------------------------------
fit.plot <-
ggplot(data = cars.data, aes(x = weight_c, y = mpg)) +
geom_point()
# select a random sample of 100 draws from the posterior distribution
sims <-
posterior %>%
mutate(n = row_number()) %>%
sample_n(size = 100)
# add these draws to the plot
lines <-
purrr::map(1:100, function(i) stat_function(fun = function(x) sims[i, 1] + sims[i, 2] * x,
size = 0.08, color = "gray"))
fit.plot <- fit.plot + lines
# add the mean line to the plot
fit.plot <-
fit.plot +
stat_function(fun = function(x) mean(posterior$alpha) + mean(posterior$beta_w) * x)
fit.plot
