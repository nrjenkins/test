cars.data <- mtcars
library(tidyverse)
glimpse(cars.data)
cars.data <-
cars.data %>%
rename(cylinders = cyl,
displacement = disp,
rear_axle_ratio = drat,
weight = wt,
engine_type = vs,
trans_type = am,
gears = gear) %>%
mutate(engine_type = factor(engine_type, levels = c(0, 1),
labels = c("V-shaped", "Straight")),
trans_type = factor(trans_type, levels = c(0, 1),
labels = c("Automatic", "Manual")))
glimpse(cars.data)
ggplot(data = cars.data, aes(x = weight, y = mpg)) +
geom_point()
ggplot(data = cars.data, aes(x = weight, y = mpg)) +
geom_point() +
geom_smooth(method = "lm")
library(cmdstanr)
library(tidybayes)
model.data <-
cars.data %>%
select(mpg, weight) %>%
compose_data(.)
register_knitr_engine()
linear.model$sample
linear.model$sample()
cars.data <- mtcars
library(tidyverse)
glimpse(cars.data)
cars.data <-
cars.data %>%
rename(cylinders = cyl,
displacement = disp,
rear_axle_ratio = drat,
weight = wt,
engine_type = vs,
trans_type = am,
gears = gear) %>%
mutate(engine_type = factor(engine_type, levels = c(0, 1),
labels = c("V-shaped", "Straight")),
trans_type = factor(trans_type, levels = c(0, 1),
labels = c("Automatic", "Manual")))
glimpse(cars.data)
ggplot(data = cars.data, aes(x = weight, y = mpg)) +
geom_point()
ggplot(data = cars.data, aes(x = weight, y = mpg)) +
geom_point() +
geom_smooth(method = "lm")
library(cmdstanr)
register_knitr_engine() # This registers cmdstanr with knitr so that we can use
# it with R Markdown.
register_knitr_engine(override = FALSE) # This registers cmdstanr with knitr so that we can use
library(tidybayes)
model.data <-
cars.data %>%
select(mpg, weight) %>%
compose_data(.)
linear.model$print()
# sample from our model
linear.fit.1 <- linear.model$sample(data = model.data)
# summarize our model
print(linear.fit.1)
cars.data <-
cars.data %>%
mutate(weight_c = weight - mean(weight))
linear.fit.2 <- linear.model$sample(data = model.data)
model.data <-
cars.data %>%
select(mpg, weight_c) %>%
compose_data(cars.data)
linear.fit.2 <- linear.model$sample(data = model.data)
print(linear.fit.2)
model.data <-
cars.data %>%
mutate(cylinders_c = cylinders - mean(cylinders),
hp_c = hp - mean(hp)) %>%
select(mpg, weight_c, cylinders_c, hp_c) %>%
compose_data(.)
linear.fit.3 <- linear.model$sample(data = model.data)
print(linear.fit.3)
traceplot(linear.fit.3)
library(bayesplot)
rhats <- rhat(linear.fit.3)
draws <- linear.fit.3$draws()
rhats <- rhat(linear.fit.3)
rhats <- rhat(draws)
rhats <- mcmc_hist(draws)
mcmc_hist(draws)
traceplot(draws)
mcmc_trace(draws)
fit.draws <- linear.fit.3$draws()
mcmc_trace(fit.draws)
mcmc_rhat(fit.draws)
rhats <- posterior::rhat(draws)
rhats
rhats <- posterior::rhat(linear.fit.3)
rhats <- posterior::rhat(fit.draws)
rhats
mcmc_rhat(rhats)
ggmcmc::ggs_Rhat(fit.draws)
ggmcmc::ggs_Rhat(linear.fit.3)
linear.fit.3$cmdstan_diagnose()
linear.fit.3
linear.fit.3
linear.fit.3$cmdstan_summary()
linear.fit.3$loo()
linear.fit.3$lp()
linear.fit.3$summary()
install.packages(c("bayesplot", "BH", "caTools", "codetools", "cowplot", "crosstalk", "data.table", "diffobj", "DT", "GGally", "ggdist", "ggplot2", "ggridges", "htmltools", "janitor", "KernSmooth", "Matrix", "nlme", "parallelly", "quantreg", "RcppArmadillo", "rlang", "RSQLite", "sjmisc", "sjstats", "sp", "xfun"))
install.packages(c("bayesplot", "BH", "caTools", "codetools", "cowplot", "crosstalk", "data.table", "diffobj", "DT", "GGally", "ggdist", "ggplot2", "ggridges", "htmltools", "janitor", "KernSmooth", "Matrix", "nlme", "parallelly", "quantreg", "RcppArmadillo", "rlang", "RSQLite", "sjmisc", "sjstats", "sp", "xfun"))
cars.data <- mtcars
library(tidyverse)
glimpse(cars.data)
cars.data <-
cars.data %>%
rename(cylinders = cyl,
displacement = disp,
rear_axle_ratio = drat,
weight = wt,
engine_type = vs,
trans_type = am,
gears = gear) %>%
mutate(engine_type = factor(engine_type, levels = c(0, 1),
labels = c("V-shaped", "Straight")),
trans_type = factor(trans_type, levels = c(0, 1),
labels = c("Automatic", "Manual")))
glimpse(cars.data)
ggplot(data = cars.data, aes(x = weight, y = mpg)) +
geom_point()
ggplot(data = cars.data, aes(x = weight, y = mpg)) +
geom_point() +
geom_smooth(method = "lm")
library(cmdstanr)
register_knitr_engine(override = FALSE) # This registers cmdstanr with knitr so that we can use
# it with R Markdown.
library(tidybayes)
model.data <-
cars.data %>%
select(mpg, weight) %>%
compose_data(.)
# sample from our model
linear.fit.1 <- linear.model$sample(data = model.data)
# summarize our model
print(linear.fit.1)
cars.data <-
cars.data %>%
mutate(weight_c = weight - mean(weight))
model.data <-
cars.data %>%
select(mpg, weight_c) %>%
compose_data(cars.data)
linear.fit.2 <- linear.model$sample(data = model.data)
print(linear.fit.2)
model.data <-
cars.data %>%
mutate(cylinders_c = cylinders - mean(cylinders),
hp_c = hp - mean(hp)) %>%
select(mpg, weight_c, cylinders_c, hp_c) %>%
compose_data(.)
linear.fit.3 <- linear.model$sample(data = model.data)
print(linear.fit.3)
library(bayesplot)
mcmc_trace(linear.fit.3)
fit.draws <- linear.fit.3$draws()
mcmc_trace(fit.draws)
rhats <- rhat(linear.fit.3)
mcmc_rhat(rhats)
eff.ratio <- neff_ratio(linear.fit.3)
eff.ratio
mcmc_neff(eff.ratio)
posterior.draws <- as.data.frame(linear.fit.3)
mcmc_acf(fit.draws)
linear.fit.3 <- linear.model$sample(data = model.data)
print(linear.fit.3)
y <- cars.data$mpg
y.rep <- extract(linear.fit.3)[["y_rep"]]
y.rep <- fit.draws[["y_rep"]]
draws.df <- posterior::as_draws_df(fit.draws)
View(draws.df)
fit.draws <- linear.fit.3$draws()
draws.df <- posterior::as_draws_df(fit.draws)
View(draws.df)
y.rep <- fit.draws[["y_rep"]]
y.rep <- draws.df[["y_rep"]]
summary(linear.fit.3)
linear.fit.3 <- sampling(linear.model, data = model.data)
library(rstan)
linear.fit.3 <- sampling(linear.model, data = model.data)
y.rep <- extract(linear.fit.3)[["y_rep"]]
View(draws.df)
y.rep <- extract(linear.fit.3)
View(y.rep)
linear.fit.3 <- linear.model$sample(data = model.data)
print(linear.fit.3)
fit.draws <- linear.fit.3$draws()
draws.list <- posterior::as_draws_list(fit.draws)
View(draws.list)
View(y.rep)
draws.list <- posterior::as_draws_df(fit.draws)
View(draws.list)
View(y.rep)
View(y.rep)
y.rep[["y_rep"]]
View(y.rep)
